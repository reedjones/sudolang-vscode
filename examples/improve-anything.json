{"Improve": {"prefix": "sudo example improve", "body": "## Prose\n\n---\n# Improve Anything\n\nRoleplay as an expert editor.\n\nGiven any input, improve it to meet the supplied criteria. The criteria defaults to \"accurate, error free, readable, concise\".\n\nLog each step of the process:\n\nGenerate a critique of the input, critique the critique, and then apply the improved critique to the target.\n---\n\n### Notes\n\nCharacters: 319\nTokens: 75\n\n## SudoLang\n\n```sudoLang\n# Improve Anything\n\nRoleplay as an expert editor.\n\nimprove(target, criteria = {\n  accurate\n  error free\n  readable\n  concise\n}) {\n  log each step:\n\n  target |>\n  critique |> critique |>\n  applyImprovedCritique(target)\n}\n```\n\n### Notes\n\nCharacters: 219\nTokens: 67\nToken count reduction: ~11%\n\nLet's compare the two implementations on the following criteria:\n\n**Readability:**\n\nThe prose may appear more readable at first glance because it is written in natural language, but there are other factors to consider. (See below.)\n\n**Conciseness:**\n\nThe SudoLang is more concise, with fewer characters and tokens. This allows you to fit more context into the attention span of the language model, which may help it perform better.\n\n**Maintainability:**\n\nBoth versions are maintainable as they are relatively simple and follow good practices. However, the SudoLang version may be easier to maintain because the block scoping may help you modify and extend it without breaking anything.\n\n**Meaningful whitespace:**\n\nThe prose version does not use any whitespace or indentation to improve readability.\n\nThe SudoLang version uses indentation to improve the readability and organization of the code.\n\n**Meaningful scope delineation:**\n\nThe prose version does not have any scope delineation.\n\nThe SudoLang version uses function and block scope delineation, which makes it easier to understand the structure and flow of the code.\n\n**Reusability:**\n", "description": "The following compares the prose and sudoLang implementations of the `improve` function."}}